name: Deploy to Remote Server

on:
  push:
    tags:
      - '*'  # Esto activa el flujo para cualquier tag
  release:
    types: [created, published]  # Activa el flujo al crear o publicar una release

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Checa el código del repositorio
    - name: Checkout code
      uses: actions/checkout@v3

    # Debug: Información del evento activador
    - name: Debug Event Info
      run: |
        echo "Evento: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "SHA: ${{ github.sha }}"
        echo "Tag o Release: ${{ github.ref_name }}"

    # 2. Configura JDK 11
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # 3. Compila el proyecto y construye el WAR
    - name: Build WAR with Maven
      run: mvn clean package -DskipTests

    # 4. Configura la llave SSH
    - name: Configure SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.CODECREANDO_APPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    # 5. Copia el WAR y Dockerfile al servidor remoto
    - name: Copy WAR and Dockerfile to Remote Server
      run: |
        scp -o StrictHostKeyChecking=no -P 5422 target/demo-1.0.0.war mtienda@astra.growjet.tech:/opt/apps/demo/demo-1.0.0.war
        scp -o StrictHostKeyChecking=no -P 5422 Dockerfile mtienda@astra.growjet.tech:/opt/apps/demo/Dockerfile

    # 6. Ejecuta comandos en el servidor remoto para construir y desplegar el contenedor
    - name: Build and Deploy Docker Container on Remote Server
      run: |
        ssh -o StrictHostKeyChecking=no -p 5422 mtienda@astra.growjet.tech << 'EOF'
          cd /opt/apps/demo
          docker build -t demo-app:latest .
          docker stop demo-app || true
          docker rm demo-app || true
          docker run -d --name demo-app -p 8081:8080 demo-app:latest
        EOF
